"""Initial migration

Revision ID: c8a3b0e1d89b
Revises: 
Create Date: 2024-08-25 14:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c8a3b0e1d89b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('products',
    sa.Column('CODPRD', sa.String(), nullable=False),
    sa.Column('NOMEFANTASIA', sa.String(), nullable=True),
    sa.Column('PRECO2', sa.Float(), nullable=True),
    sa.Column('PRECO1', sa.Float(), nullable=True),
    sa.Column('SALDOGERALFISICO', sa.Float(), nullable=True),
    sa.Column('CODGRUPO', sa.String(), nullable=True),
    sa.Column('CODBARRAS', sa.String(), nullable=True),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.PrimaryKeyConstraint('CODPRD')
    )
    op.create_index(op.f('ix_products_CODPRD'), 'products', ['CODPRD'], unique=False)
    op.create_index(op.f('ix_products_NOMEFANTASIA'), 'products', ['NOMEFANTASIA'], unique=False)
    
    # Manually added extensions and functions from database.py
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm;")
    op.execute("CREATE EXTENSION IF NOT EXISTS btree_gin;")
    op.execute("CREATE EXTENSION IF NOT EXISTS unaccent;")
    op.execute("CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;")

    op.execute("""
        CREATE OR REPLACE FUNCTION public.immutable_unaccent(text)
        RETURNS text
        LANGUAGE sql
        IMMUTABLE
        PARALLEL SAFE
        AS $$
          SELECT public.unaccent($1)
        $$;
    """)
    
    op.execute('CREATE INDEX IF NOT EXISTS idx_produtos_nome ON products USING gin ("NOMEFANTASIA" gin_trgm_ops);')
    op.execute('CREATE INDEX IF NOT EXISTS idx_produtos_nome_unaccent ON products USING gin ( (immutable_unaccent("NOMEFANTASIA")) gin_trgm_ops );')
    op.execute('CREATE INDEX IF NOT EXISTS idx_produtos_codprd ON products ("CODPRD");')
    op.execute('CREATE INDEX IF NOT EXISTS idx_produtos_barras ON products ("CODBARRAS");')
    op.execute('CREATE INDEX IF NOT EXISTS idx_products_search ON products USING GIN (search_vector);')

    op.execute("""
        CREATE OR REPLACE FUNCTION update_search_vector()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.search_vector :=
                setweight(to_tsvector('portuguese', COALESCE(NEW."NOMEFANTASIA", '')), 'A') ||
                setweight(to_tsvector('portuguese', COALESCE(NEW."CODPRD", '')), 'B');
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        DROP TRIGGER IF EXISTS tsvectorupdate ON products;
        CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON products
        FOR EACH ROW EXECUTE FUNCTION update_search_vector();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER IF EXISTS tsvectorupdate ON products;")
    op.execute("DROP FUNCTION IF EXISTS update_search_vector();")
    op.execute("DROP FUNCTION IF EXISTS immutable_unaccent(text);")
    op.drop_index('idx_products_search', table_name='products')
    op.drop_index('idx_produtos_barras', table_name='products')
    op.drop_index('idx_produtos_codprd', table_name='products')
    op.drop_index('idx_produtos_nome_unaccent', table_name='products')
    op.drop_index('idx_produtos_nome', table_name='products')
    op.drop_index(op.f('ix_products_NOMEFANTASIA'), table_name='products')
    op.drop_index(op.f('ix_products_CODPRD'), table_name='products')
    op.drop_table('products')
    # ### end Alembic commands ###
